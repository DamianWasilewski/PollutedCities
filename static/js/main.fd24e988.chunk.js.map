{"version":3,"sources":["countriesList.js","components/ErrorMessage/ErrorMessage.js","components/CitySearchForm/CitySearchForm.js","components/FancyBackground/FancyBackground.js","components/Modal/Modal.js","components/CityOutput/CityOutput.js","components/Backdrop/Backdrop.js","components/Header/Header.js","features/services/service.app.js","App/App.js","serviceWorker.js","index.js"],"names":["countriesList","split","errorMessage","props","react_default","a","createElement","className","error","CitySearchForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTextChange","e","countries","value","target","replace","localStorage","setItem","suggestions","length","regex","RegExp","concat","sort","filter","country","test","setState","selected","slice","text","suggestionSelected","getCities","state","handleArrows","keyCode","prevState","handleMouse","key","storedInputValue","getItem","_this2","map","suggestion","i","onMouseEnter","onClick","serverError","autoComplete","type","name","placeholder","onChange","onKeyDown","renderSuggestions","ErrorMessage_ErrorMessage","Component","FancyBackground","children","modal","modalText","click","CityOutput","visible","descriptionTogglerHandler","library","add","faPlusSquare","_this$props","city","description","descriptionClasses","react_fontawesome_index_es","icon","backdrop","header","Service","axios","get","code","App","cities","modalError","countryName","charAt","toUpperCase","find","el","AppService","then","response","fetchedCities","data","results","callsToWiki","getDescriptions","result","query","pages","keys","extract","Promise","all","objectSpread","modalCloseHandler","getCountry","catch","err","toString","_this$state","Modal_Modal","Backdrop_Backdrop","components_FancyBackground_FancyBackground","Header_Header","components_CitySearchForm_CitySearchForm","getInformation","_ref","components_CityOutput_CityOutput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd24e988.chunk.js","sourcesContent":["export default `Afghanistan\r\nAlbania\r\nAlgeria\r\nAndorra\r\nAngola\r\nAntigua & Deps\r\nArgentina\r\nArmenia\r\nAustralia\r\nAustria\r\nAzerbaijan\r\nBahamas\r\nBahrain\r\nBangladesh\r\nBarbados\r\nBelarus\r\nBelgium\r\nBelize\r\nBenin\r\nBhutan\r\nBolivia\r\nBosnia Herzegovina\r\nBotswana\r\nBrazil\r\nBrunei\r\nBulgaria\r\nBurkina\r\nBurundi\r\nCambodia\r\nCameroon\r\nCanada\r\nCape Verde\r\nCentral African Rep\r\nChad\r\nChile\r\nChina\r\nColombia\r\nComoros\r\nCongo\r\nCongo {Democratic Rep}\r\nCosta Rica\r\nCroatia\r\nCuba\r\nCyprus\r\nCzech Republic\r\nDenmark\r\nDjibouti\r\nDominica\r\nDominican Republic\r\nEast Timor\r\nEcuador\r\nEgypt\r\nEl Salvador\r\nEquatorial Guinea\r\nEritrea\r\nEstonia\r\nEthiopia\r\nFiji\r\nFinland\r\nFrance\r\nGabon\r\nGambia\r\nGeorgia\r\nGermany\r\nGhana\r\nGreece\r\nGrenada\r\nGuatemala\r\nGuinea\r\nGuinea-Bissau\r\nGuyana\r\nHaiti\r\nHonduras\r\nHungary\r\nIceland\r\nIndia\r\nIndonesia\r\nIran\r\nIraq\r\nIreland {Republic}\r\nIsrael\r\nItaly\r\nIvory Coast\r\nJamaica\r\nJapan\r\nJordan\r\nKazakhstan\r\nKenya\r\nKiribati\r\nKorea North\r\nKorea South\r\nKosovo\r\nKuwait\r\nKyrgyzstan\r\nLaos\r\nLatvia\r\nLebanon\r\nLesotho\r\nLiberia\r\nLibya\r\nLiechtenstein\r\nLithuania\r\nLuxembourg\r\nMacedonia\r\nMadagascar\r\nMalawi\r\nMalaysia\r\nMaldives\r\nMali\r\nMalta\r\nMarshall Islands\r\nMauritania\r\nMauritius\r\nMexico\r\nMicronesia\r\nMoldova\r\nMonaco\r\nMongolia\r\nMontenegro\r\nMorocco\r\nMozambique\r\nMyanmar, {Burma}\r\nNamibia\r\nNauru\r\nNepal\r\nNetherlands\r\nNew Zealand\r\nNicaragua\r\nNiger\r\nNigeria\r\nNorway\r\nOman\r\nPakistan\r\nPalau\r\nPanama\r\nPapua New Guinea\r\nParaguay\r\nPeru\r\nPhilippines\r\nPoland\r\nPortugal\r\nQatar\r\nRomania\r\nRussian Federation\r\nRwanda\r\nSt Kitts & Nevis\r\nSt Lucia\r\nSaint Vincent & the Grenadines\r\nSamoa\r\nSan Marino\r\nSao Tome & Principe\r\nSaudi Arabia\r\nSenegal\r\nSerbia\r\nSeychelles\r\nSierra Leone\r\nSingapore\r\nSlovakia\r\nSlovenia\r\nSolomon Islands\r\nSomalia\r\nSouth Africa\r\nSouth Sudan\r\nSpain\r\nSri Lanka\r\nSudan\r\nSuriname\r\nSwaziland\r\nSweden\r\nSwitzerland\r\nSyria\r\nTaiwan\r\nTajikistan\r\nTanzania\r\nThailand\r\nTogo\r\nTonga\r\nTrinidad & Tobago\r\nTunisia\r\nTurkey\r\nTurkmenistan\r\nTuvalu\r\nUganda\r\nUkraine\r\nUnited Arab Emirates\r\nUnited Kingdom\r\nUnited States\r\nUruguay\r\nUzbekistan\r\nVanuatu\r\nVatican City\r\nVenezuela\r\nVietnam\r\nYemen\r\nZambia\r\nZimbabwe`.split('\\n');","import React from 'react';\r\n\r\nimport './ErrorMessage.css'\r\n\r\nconst errorMessage = (props) => (\r\n  <div className=\"errorMessage\">\r\n    <p>{props.error}</p>\r\n  </div>\r\n);\r\n\r\nexport default errorMessage;","import React, { Component } from 'react';\r\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\r\n\r\nimport './CitySearchForm.css';\r\n\r\nclass CitySearchForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      suggestions: [],\r\n      text: '',\r\n      selected: -1\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const storedInputValue = localStorage.getItem('inputValue');\r\n    this.setState(() => ({ text: storedInputValue }))\r\n  }\r\n\r\n  onTextChange = (e) => {\r\n    const { countries } = this.props;\r\n    const value = e.target.value.replace(/[&\\/\\\\#,+()$~%.'\":*?<>{}\\[\\]]/g, '');\r\n    localStorage.setItem('inputValue', value);\r\n    let suggestions = [];\r\n    if (value.length > 0) {\r\n      const regex = new RegExp(`^${value}`, 'i');\r\n      suggestions = countries.sort().filter(country => regex.test(country));\r\n    } else {\r\n      this.setState({ selected: -1 })\r\n    }\r\n    this.setState(() => ({ suggestions: suggestions.slice(0, 3), text: value }));\r\n  }\r\n\r\n  suggestionSelected = () => {\r\n    this.props.getCities(this.state.text);\r\n    this.setState(() => ({\r\n      suggestions: [],\r\n      selected: -1\r\n    }));\r\n    localStorage.setItem('inputValue', this.state.text);\r\n  }\r\n\r\n  handleArrows = (e) => {\r\n    if (e.keyCode === 13) {\r\n      this.suggestionSelected()\r\n    }\r\n    if (e.keyCode === 38) {\r\n      this.setState(prevState => ({\r\n        selected: prevState.selected > 0 ? prevState.selected - 1 : prevState.selected,\r\n        text: this.state.suggestions[prevState.selected > 0 ? prevState.selected - 1 : prevState.selected],\r\n      }));\r\n      return;\r\n    }\r\n    if (e.keyCode === 40) {\r\n      this.setState(prevState => ({\r\n        selected: prevState.selected + 1 === prevState.suggestions.length ? prevState.selected : prevState.selected + 1,\r\n        text: this.state.suggestions[prevState.selected + 1 === prevState.suggestions.length ? prevState.selected : prevState.selected + 1],\r\n      }))\r\n    }\r\n  }\r\n\r\n  handleMouse = (key, text) => {\r\n    this.setState({ selected: key, text })\r\n  }\r\n\r\n  renderSuggestions() {\r\n    const { suggestions } = this.state;\r\n    if (suggestions.length === 0) {\r\n      return null;\r\n    }\r\n    return (\r\n      <ul>\r\n        {suggestions.map((suggestion, i) => {\r\n          return <li\r\n            onMouseEnter={() => this.handleMouse(i, suggestion)}\r\n            className={this.state.selected === i ? 'selected' : ''}\r\n            key={suggestion}\r\n            onClick={this.suggestionSelected}>{suggestion}</li>\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { serverError } = this.props\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"form\">\r\n          <div className=\"inputs-wrapper\">\r\n            <input autoComplete=\"off\" type=\"text\" name=\"country\" placeholder=\"Country\" value={text || ''} onChange={this.onTextChange} onKeyDown={this.handleArrows} />\r\n            {this.renderSuggestions()}\r\n          </div>\r\n          {serverError && <ErrorMessage error={serverError} />}\r\n          <button value=\"Get cities\" onClick={this.suggestionSelected}>Get Cities</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CitySearchForm;","import React from 'react';\r\n\r\nimport './FancyBackground.css';\r\n\r\nfunction FancyBackground(props) {\r\n  return (\r\n    <div className=\"FancyBackground\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FancyBackground;","import React from 'react';\r\n\r\nimport './Modal.css';\r\n\r\nconst modal = props => (\r\n      <div className=\"modal\">\r\n        <div className=\"modal-header\"><b>Demo version notification</b></div>\r\n        <div className=\"modal-content\">{props.modalText}</div>\r\n        <button onClick={props.click} className=\"modal-button\">Confirm</button>\r\n      </div>  \r\n)\r\n\r\nexport default modal;","import React, { Component } from 'react';\r\nimport './CityOutput.css';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nclass CityOutput extends Component {\r\n  state = {\r\n    visible: false\r\n  }\r\n  descriptionTogglerHandler = () => {\r\n    this.setState({ visible: !this.state.visible })\r\n  };\r\n  render() {\r\n    library.add(faPlusSquare);\r\n    const { city, description } = this.props;\r\n    const { visible } = this.state;\r\n    let descriptionClasses = 'output-record description'\r\n    if (visible) {\r\n      descriptionClasses = 'output-record description open';\r\n    }\r\n\r\n    return (\r\n      <div className=\"output-record\">\r\n        <div className=\"output-record__row-wrapper\">\r\n          <div className=\"output-record__city\">\r\n            <b>City:</b> {city}\r\n          </div>\r\n          <div className=\"output-record__button\">\r\n            <button onClick={this.descriptionTogglerHandler}><FontAwesomeIcon icon=\"plus-square\" /></button>\r\n          </div>\r\n        </div>\r\n        <div className={descriptionClasses}>{description}</div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n};\r\n\r\nexport default CityOutput;","import React from 'react';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props => (\r\n  <div className='backdrop' onClick={props.click}/>\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\n\r\nimport './Header.css'\r\n\r\nconst header = () => (\r\n  <div className=\"header\">\r\n    <h1><b>10 most polluted cities</b></h1>\r\n  </div>\r\n);\r\n\r\nexport default header;","import axios from 'axios';\r\n\r\nclass AppService {\r\n    getCountry() {\r\n        return axios.get('https://api.openaq.org/v1/countries')\r\n    }\r\n\r\n    getCities(code) {\r\n        return axios.get(`https://api.openaq.org/v1/cities?country=${code}&order_by=count&sort=desc&limit=10`)\r\n    }\r\n\r\n    getDescriptions(name) {\r\n        return axios.get(`https://en.wikipedia.org/w/api.php?action=query&prop=extracts&exintro&explaintext&format=json&category=city&redirects&origin=*&titles=${name}`)\r\n    }\r\n}\r\n\r\nconst Service = new AppService();\r\n\r\nexport default Service;","//I had struggled with those 2 API's OpenAq doesn't cover all countries from the world, so that's why i have error message instead of modal when for example 'Afghanistan' is entered - i am taking autofill values from countriesList.js file.\n//I had to make 10 requests to Wiki API in order to get correct descriptions for certain cities. Endpoint with titles=A|B|C resulted in response with presorted array - that's why i was unable to put correct descriptions to certain cities (cities where exctract wasn't provided were sorted to the very end of array)\n//Design in minimal - i spent too much time on trying to make logic best i could\n//Readme.md will be updated tommorow (1 day after deadline, because i have to go to work right now).\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport countries from '../countriesList';\nimport CitySearchForm from '../components/CitySearchForm/CitySearchForm';\nimport FancyBackground from '../components/FancyBackground/FancyBackground';\nimport Modal from '../components/Modal/Modal';\nimport CityOutput from '../components/CityOutput/CityOutput';\nimport Backdrop from '../components/Backdrop/Backdrop';\nimport Header from '../components/Header/Header';\nimport AppService from \"../features/services/service.app\";\n\n\nclass App extends Component {\n    state = {\n        country: '',\n        error: false,\n        cities: [],\n        modalError: '',\n        serverError: '',\n        countries: []\n    }\n\n    componentDidMount() {\n        AppService.getCountry()\n            .then(response => {\n                this.setState({\n                    countries: response.data.results\n                })\n            })\n            .catch(err => {\n                this.setState({ serverError: err.toString() })\n            })\n    }\n\n    getCities = (text) => {\n        this.setState({ cities: [], serverError: '', modalError: '' });\n\n        const countryName = text.charAt(0).toUpperCase() + text.slice(1);\n\n        const country = this.state.countries.find(el => el.name === countryName);\n        if (!country || !text) {\n            this.setState({ serverError: 'Wrong country provided...' });\n            return;\n        }\n\n        const allowedCountries = new RegExp(/spain|germany|poland|france/, 'i');\n        if (!allowedCountries.test(countryName)) {\n            this.setState({ modalError: 'This is demo version of our app. It only works for: Spain, Poland, Germany and France. Feel free to check most polluted cities in those countries' });\n            return;\n        }\n\n        if (!this.state.modalError) {\n            AppService.getCities(country.code)\n                .then(response => {\n                    const fetchedCities = response.data.results;\n                    const callsToWiki = fetchedCities.map(el => {\n                        return AppService.getDescriptions(el.city)\n                            .then(result => result.data.query.pages[Object.keys(result.data.query.pages)[0]].extract)\n                    })\n\n                    Promise.all(callsToWiki).then(result => {\n                        this.setState({\n                            cities: fetchedCities.map((el, i) => {\n                                return {\n                                    ...el,\n                                    description: result[i] ? result[i] : 'No description on Wiki'\n                                }\n                            }\n                            )\n                        })\n                    })\n                })\n        }\n    }\n\n    modalCloseHandler = () => {\n        this.setState({ modalError: '' })\n    }\n\n    render() {\n        const { serverError, modalError, cities } = this.state;\n        return (\n            <div className=\"App\">\n                {modalError && <Modal modalText={modalError} click={this.modalCloseHandler} />}\n                {modalError && <Backdrop click={this.modalCloseHandler} />}\n                <FancyBackground>\n                    <Header />\n                    <h2>Pollution search</h2>\n                    <span><p>Type in country name and click 'Get cities' to check 10 most polluted cities in it</p></span>\n                </FancyBackground>\n                <div className=\"form-wrapper\">\n                    <CitySearchForm\n                        serverError={serverError}\n                        getCities={this.getCities} getInformation={this.getInformation}\n                        countries={countries}\n                    />\n                </div>\n                {cities.length > 0 &&\n                    <div className=\"output-wrapper\">\n                        <h2>Results</h2>\n                        {cities.map(({ city, description }) => (\n                            <CityOutput\n                                key={city}\n                                city={city}\n                                description={description} />\n                        ))}\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}